from .types.CMakeVariable import CMakeVariable
from .types.VariableCollection import VariableCollection

class CMakeBehavior(VariableCollection):
    """CMake Behavior related variables"""

    BUILD_SHARED_LIBS = ()
    CMAKE_ABSOLUTE_DESTINATION_FILES = ()
    CMAKE_APPBUNDLE_PATH = ()
    CMAKE_AUTOMOC_RELAXED_MODE = ()
    CMAKE_BACKWARDS_COMPATIBILITY = ()
    CMAKE_BUILD_TYPE = ()
    CMAKE_COLOR_MAKEFILE = ()
    CMAKE_CONFIGURATION_TYPES = ()
    CMAKE_DEBUG_TARGET_PROPERTIES = ()
    CMAKE_ERROR_DEPRECATED = ()
    CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION = ()
    CMAKE_EXPORT_NO_PACKAGE_REGISTRY = ()
    CMAKE_SYSROOT = ()
    CMAKE_FIND_LIBRARY_PREFIXES = ()
    CMAKE_FIND_LIBRARY_SUFFIXES = ()
    CMAKE_FIND_NO_INSTALL_PREFIX = ()
    CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY = ()
    CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY = ()
    CMAKE_FIND_PACKAGE_WARN_NO_MODULE = ()
    CMAKE_FIND_ROOT_PATH = ()
    CMAKE_FIND_ROOT_PATH_MODE_INCLUDE = ()
    CMAKE_FIND_ROOT_PATH_MODE_LIBRARY = ()
    CMAKE_FIND_ROOT_PATH_MODE_PACKAGE = ()
    CMAKE_FIND_ROOT_PATH_MODE_PROGRAM = ()
    CMAKE_FRAMEWORK_PATH = ()
    CMAKE_IGNORE_PATH = ()
    CMAKE_INCLUDE_PATH = ()
    CMAKE_INCLUDE_DIRECTORIES_BEFORE = ()
    CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE = ()
    CMAKE_INSTALL_DEFAULT_COMPONENT_NAME = ()
    CMAKE_INSTALL_MESSAGE = ()
    CMAKE_INSTALL_PREFIX = ()
    CMAKE_LIBRARY_PATH = ()
    CMAKE_MFC_FLAG = ()
    CMAKE_MODULE_PATH = ()
    CMAKE_NOT_USING_CONFIG_FLAGS = ()
    CMAKE_PREFIX_PATH = ()
    CMAKE_PROGRAM_PATH = ()
    CMAKE_SKIP_INSTALL_ALL_DEPENDENCY = ()
    CMAKE_STAGING_PREFIX = ()
    CMAKE_SYSTEM_IGNORE_PATH = ()
    CMAKE_SYSTEM_INCLUDE_PATH = ()
    CMAKE_SYSTEM_LIBRARY_PATH = ()
    CMAKE_SYSTEM_PREFIX_PATH = ()
    CMAKE_SYSTEM_PROGRAM_PATH = ()
    CMAKE_USER_MAKE_RULES_OVERRIDE = ()
    CMAKE_WARN_DEPRECATED = ()
    CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION = ()

    @staticmethod
    def CMAKE_PROJECT_PROJECT_NAME_INCLUDE(projname: str):
        return CMakeVariable("CMAKE_PROJECT_" + projname + "_INCLUDE", projname)

    @staticmethod
    def CMAKE_POLICY_DEFAULT_CMP_NNNN(polnum: str):
        return CMakeVariable("CMAKE_POLICY_DEFAULT_CMP" + polnum, polnum)

    @staticmethod
    def CMAKE_POLICY_WARNING_CMP_NNNN(polnum: str):
        return CMakeVariable("CMAKE_POLICY_WARNING_CMP" + polnum, polnum)

    @staticmethod
    def CMAKE_DISABLE_FIND_PACKAGE_PackageName(packagename: str):
        return CMakeVariable("CMAKE_DISABLE_FIND_PACKAGE_" + packagename, packagename)
